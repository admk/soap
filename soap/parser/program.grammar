# =========
#  program
# =========

statement =
    compound_statement / arithmetic_expression / boolean_expression /
    _  # empty
compound_statement = single_statement statement
single_statement =
    skip_statement / assign_statement / if_statement / while_statement /
    input_statement / output_statement / declaration_statement

skip_statement = skip semicolon

declaration_statement = variable_declaration semicolon

assign_statement =
    variable_or_declaration assign arithmetic_expression semicolon
variable_or_declaration = variable_declaration / variable_subscript

if_statement = if_block semicolon
if_block = if_else_block / if_then_block
if_then_block = if boolean_block code_block
if_else_block = if_then_block else code_block

while_statement = while boolean_block code_block semicolon

boolean_block = left_paren boolean_expression right_paren
code_block = left_curl statement right_curl

input_statement = input left_paren input_list right_paren semicolon
input_list = input_expr maybe_input_list
maybe_input_list = comma_input_list / _
comma_input_list = comma input_list
input_expr = variable_declaration colon number

output_statement = output left_paren variable_list right_paren semicolon


# ==============
#  declarations
# ==============

variable_declaration = data_type new_variable

data_type  = base_type / array_type
array_type = base_type left_brac integer_list right_brac

base_type = int_type / real_type

int_type  = _ 'int'  _
real_type = _ 'real' _


# =============
#  expressions
# =============

boolean_expression = and_factor maybe_or_list

and_factor   = bool_atom maybe_and_list
bool_atom    = bool_parened / binary_bool_expr / unary_bool_expr
bool_parened = left_paren boolean_expression right_paren

binary_bool_expr = term compare_operator term
unary_bool_expr  = not bool_atom
maybe_or_list    = or_list / _
or_list          = or_expr maybe_or_list
or_expr          = or and_factor
maybe_and_list   = and_list / _
and_list         = and_expr maybe_and_list
and_expr         = and bool_atom

arithmetic_expression = select / term

select  = boolean_expression question term colon term
term    = factor maybe_sum_list
factor  = atom maybe_prod_list
atom    = parened / unary_expr / number / variable_subscript
parened = left_paren arithmetic_expression right_paren

unary_expr      = sub atom
maybe_sum_list  = sum_list / _
sum_list        = sum_expr maybe_sum_list
sum_expr        = sum_operator factor
maybe_prod_list = prod_list / _
prod_list       = prod_expr maybe_prod_list
prod_expr       = prod_operator atom

variable_subscript      = variable_with_subscript / variable
variable_with_subscript = variable left_brac expression_list right_brac

number   = error / interval / scalar
error    = interval interval
interval = left_brac scalar comma scalar right_brac
scalar   = real / integer


# ==============
#  common lists
# ==============

variable_list = variable maybe_variable_list
maybe_variable_list = comma_variable_list / _
comma_variable_list = comma variable_list

integer_list = integer maybe_integer_list
maybe_integer_list = comma_integer_list / _
comma_integer_list = comma integer_list

expression_list          = arithmetic_expression maybe_expression_list
maybe_expression_list    = comma_expression_list / _
comma_expression_list    = comma expression_list


# ==========
#  literals
# ==========

skip        = _ 'skip'   _
if          = _ 'if'     _
else        = _ 'else'   _
while       = _ 'while'  _
input       = _ 'input'  _
output      = _ 'output' _

assign      = _ '=' _
left_paren  = _ '(' _
right_paren = _ ')' _
left_curl   = _ '{' _
right_curl  = _ '}' _
semicolon   = _ ';' _
question    = _ '?' _
colon       = _ ':' _

compare_operator = le / lt / ge / gt / eq / ne

lt = _ '<'  _
le = _ '<=' _
ge = _ '>=' _
gt = _ '>'  _
eq = _ '==' _
ne = _ '!=' _

and = _ 'and' _
or  = _ 'or'  _
not = _ 'not' _

sum_operator = add / sub
prod_operator = mul / div / pow

add = _ '+' _
sub = _ '-' _
mul = _ '*' _
div = _ '/' _
pow = _ '^' _

left_brac  = _ '[' _
right_brac = _ ']' _
comma      = _ ',' _


# =========
#  regexes
# =========

variable = _ variable_regex _
new_variable = _ variable_regex _
variable_regex = ~'[a-zA-Z_][a-zA-Z_0-9]*'

integer = _ integer_regex _
real    = _ real_regex _
integer_regex = ~'[0-9]+'
real_regex    = ~'(\+|-)?([0-9]+\.?[0-9]*|\.[0-9]+)([eE](\+|-)?[0-9]+)?'

_ = ~r"\s*(?:#[^\r\n]*)?\s*"
