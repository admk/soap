# program
# =======

statement =
    compound_statement /
    boolean_expression /
    arithmetic_expression /
    _  # empty
compound_statement = single_statement statement
single_statement =
    skip_statement / assign_statement / if_statement / while_statement

skip_statement = skip_literal semicolon

assign_statement =
    variable assign_literal arithmetic_expression semicolon

if_statement = if_block semicolon
if_block = if_else_block / if_then_block
if_then_block = if_literal boolean_block code_block
if_else_block = if_then_block code_block

while_statement = while_literal boolean_block code_block semicolon

boolean_block = left_paren boolean_expression right_paren
code_block = left_paren statement right_paren


# expressions
# ===========

boolean_expression =
    arithmetic_expression boolean_operator arithmetic_expression

arithmetic_expression = factor sum_expr*
factor = primary prod_expr*
primary = parened / unary_expr / number / variable
parened = left_paren arithmetic_expression right_paren

unary_expr = sub_literal primary
sum_expr = sum_operator factor
prod_expr = prod_operator primary


# literals
# ========

skip_literal   = _ 'skip' _
assign_literal = _ ':=' _
if_literal     = _ 'if' _
while_literal  = _ 'while' _
left_paren     = _ '(' _
right_paren    = _ ')' _
semicolon      = _ ';' _

boolean_operator =
    lt_literal / le_literal / ge_literal / gt_literal / eq_literal / ne_literal

sum_operator = add_literal / sub_literal
prod_operator = mul_literal / div_literal / pow_literal

lt_literal = _ '<'  _
le_literal = _ '<=' _
ge_literal = _ '>=' _
gt_literal = _ '>'  _
eq_literal = _ '==' _
ne_literal = _ '!=' _

add_literal = _ '+' _
sub_literal = _ '-' _
mul_literal = _ '*' _
div_literal = _ '/' _
pow_literal = _ '^' _


# regexes
# =======

number = _ number_regex _
variable = _ variable_regex _

number_regex = ~'[0-9]+'
variable_regex = ~'[a-zA-Z_][a-zA-Z_0-9]*'

_ = ~'\s*'m
