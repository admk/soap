# =========
#  program
# =========

statement =
    compound_statement /
    boolean_expression /
    arithmetic_expression /
    _  # empty
compound_statement = single_statement statement
single_statement =
    skip_statement / assign_statement / if_statement / while_statement

skip_statement = skip semicolon

assign_statement =
    variable assign arithmetic_expression semicolon

if_statement = if_block semicolon
if_block = if_else_block / if_then_block
if_then_block = if boolean_block code_block
if_else_block = if_then_block code_block

while_statement = while boolean_block code_block semicolon

boolean_block = left_paren boolean_expression right_paren
code_block = left_paren statement right_paren


# =============
#  expressions
# =============

boolean_expression    = term boolean_operator term
arithmetic_expression = select / term

select  = boolean_expression question term colon term
term    = factor maybe_sum_list
factor  = atom maybe_prod_list
atom    = parened / unary_expr / number / variable
parened = left_paren arithmetic_expression right_paren

unary_expr      = sub atom
maybe_sum_list  = sum_list / _
sum_list        = sum_expr maybe_sum_list
sum_expr        = sum_operator factor
maybe_prod_list = prod_list / _
prod_list       = prod_expr maybe_prod_list
prod_expr       = prod_operator atom


# ==========
#  literals
# ==========

skip        = _ 'skip'  _
assign      = _ ':='    _
if          = _ 'if'    _
while       = _ 'while' _
left_paren  = _ '('     _
right_paren = _ ')'     _
semicolon   = _ ';'     _
question    = _ '?'     _
colon       = _ ':'     _

boolean_operator = lt / le / ge / gt / eq / ne

lt = _ '<'  _
le = _ '<=' _
ge = _ '>=' _
gt = _ '>'  _
eq = _ '==' _
ne = _ '!=' _

sum_operator = add / sub
prod_operator = mul / div / pow

add = _ '+' _
sub = _ '-' _
mul = _ '*' _
div = _ '/' _
pow = _ '^' _


# =========
#  regexes
# =========

variable = _ variable_regex _
variable_regex = ~'[a-zA-Z_][a-zA-Z_0-9]*'

number = _ (number_regex) _
number_regex =  float_regex / integer_regex
integer_regex = ~'[0-9]+'
float_regex = ~'(\+|-)?([0-9]+\.?[0-9]*|\.[0-9]+)([eE](\+|-)?[0-9]+)?'

_ = ~r"\s*(?:#[^\r\n]*)?\s*"
