# ===========
#  statement
# ===========

statement = compound_statement / _  # empty
compound_statement = single_statement statement
single_statement =
    skip_statement / assign_statement / if_statement / while_statement /
    for_statement / declaration_statement /
    pragma_input_statement / pragma_output_statement

skip_statement = skip semicolon

declaration_statement = variable_declaration semicolon

assign_statement = assign_part semicolon
variable_or_declaration = variable_declaration / variable_subscript

if_statement = if_else_block / if_then_block
if_then_block = if boolean_block code_block
if_else_block = if_then_block else code_block

while_statement = while boolean_block code_block

for_statement =
    for left_paren for_assign_part semicolon boolean_expression semicolon
    for_assign_part right_paren code_block

for_assign_part = assign_part / skip
assign_part = variable_or_declaration assign arithmetic_expression

boolean_block = left_paren boolean_expression right_paren
code_block = left_curl statement right_curl

pragma_input_statement = pragma input input_list _

input_list = input_expr maybe_input_list
maybe_input_list = comma_input_list / _
comma_input_list = comma input_list
input_expr = input_assign_expr / variable_declaration
input_assign_expr = variable_declaration assign number

pragma_output_statement = pragma output output_list _

output_list = variable maybe_output_list
maybe_output_list = comma_output_list / _
comma_output_list = comma output_list


# ==========
#  literals
# ==========

input = _no_new_line 'input' _no_new_line
output = _no_new_line 'output' _no_new_line
pragma = _ '#pragma soap' _no_new_line


# ==========
#  literals
# ==========

def        = _ 'def'    _
skip       = _ 'skip'   _
if         = _ 'if'     _
else       = _ 'else'   _
while      = _ 'while'  _
for        = _ 'for'    _
return     = _ 'return' _

assign     = _ '=' _
left_curl  = _ '{' _
right_curl = _ '}' _
semicolon  = _ ';' _
