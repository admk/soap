lut,dsp,error,latency,expression
517,5,0.00024989250232465565,11811160093,"// Symmetric rank-2k operations

#define N 1024
#define _PB_NI N
#define _PB_NJ N
#define _PB_NK N
#define _PB_NL N

#pragma np_opt input \
    float alpha = [0.0, 1.0], \
    float beta = [0.0, 1.0], \
    float A[_PB_NI][_PB_NK] = [0.0, 1.0][0, 0], \
    float B[_PB_NK][_PB_NJ] = [0.0, 1.0][0, 0], \
    float C[_PB_NL][_PB_NJ] = [0.0, 1.0][0, 0]
#pragma np_opt output C

int i; int j; int k;

for (i = 0; i < _PB_NI; i++)
    for (j = 0; j < _PB_NI; j++)
        for (k = 0; k < _PB_NJ; k++)
        {
            C[i][j] += alpha * A[i][k] * B[j][k];
            C[i][j] += alpha * B[i][k] * A[j][k];
        }
"
517,5,0.00013729558850172907,10737418267,"void kernel_syr2k(float alpha, float beta, float A[1024][1024], float B[1024][1024], float C[1024][1024]) {
    #pragma np_opt input float alpha = [0.0, 1.0], float beta = [0.0, 1.0], float A[1024][1024] = [0.0, 1.0], float B[1024][1024] = [0.0, 1.0], float C[1024][1024] = [0.0, 1.0] 
    #pragma np_opt output C 
    float _t15_l33; 
    int i_l37; 
    float _t21_l33; 
    int _t34_l37; 
    int i_l33; 
    float _t20_l33; 
    int k_l33; 
    int i_l41; 
    float _t16_l33; 
    float _t5_l33; 
    float alpha_l33; 
    int _t8_l33; 
    int _t13_l33; 
    int _t6_l41; 
    float _t26_l33; 
    int _t8_l41; 
    float _t24_l33; 
    int _t38_l41; 
    int _t28_l37; 
    float _t23_l33; 
    float _t18_l33; 
    int _t28_l33; 
    float _t25_l33; 
    int _t28_l41; 
    float alpha_l41; 
    float _t5; 
    int _t8_l37; 
    float alpha_l37; 
    float _t5_l37; 
    int _t6_l37; 
    int _t6_l33; 
    float _t22_l33; 
    int j_l33; 
    int _t29_l33; 
    int _t10_l37; 
    int _t10_l33; 
    float _t5_l41; 
    int j_l37; 
    float _t19_l33; 
    _t5 = alpha; 
    _t5_l41 = _t5; 
    alpha_l41 = _t5_l41; 
    _t6_l41 = 0; 
    i_l41 = _t6_l41; 
    while (i_l41 < 1024) {
        _t8_l41 = i_l41; 
        _t5_l41 = alpha_l41; 
        _t8_l37 = _t8_l41; 
        i_l37 = _t8_l37; 
        _t6_l37 = 0; 
        j_l37 = _t6_l37; 
        alpha_l37 = _t5_l41; 
        while (j_l37 < 1024) {
            _t8_l37 = i_l37; 
            _t10_l37 = j_l37; 
            _t5_l37 = alpha_l37; 
            i_l33 = _t8_l37; 
            _t10_l33 = _t10_l37; 
            j_l33 = _t10_l33; 
            _t6_l33 = 0; 
            k_l33 = _t6_l33; 
            alpha_l33 = _t5_l37; 
            while (k_l33 < 1024) {
                _t8_l33 = i_l33; 
                _t28_l33 = 1; 
                _t13_l33 = k_l33; 
                _t15_l33 = A[_t8_l33][_t13_l33]; 
                _t5_l33 = alpha_l33; 
                _t16_l33 = _t5_l33 * _t15_l33; 
                _t10_l33 = j_l33; 
                _t18_l33 = B[_t10_l33][_t13_l33]; 
                _t19_l33 = _t16_l33 * _t18_l33; 
                i_l33 = _t8_l33; 
                _t22_l33 = A[_t10_l33][_t13_l33]; 
                _t20_l33 = B[_t8_l33][_t13_l33]; 
                _t21_l33 = _t5_l33 * _t20_l33; 
                _t23_l33 = _t21_l33 * _t22_l33; 
                _t24_l33 = _t19_l33 + _t23_l33; 
                _t25_l33 = C[_t8_l33][_t10_l33]; 
                _t26_l33 = _t24_l33 + _t25_l33; 
                alpha_l33 = _t5_l33; 
                C[_t8_l33][_t10_l33] = _t26_l33; 
                _t29_l33 = _t13_l33 + _t28_l33; 
                j_l33 = _t10_l33; 
                k_l33 = _t29_l33;
            } 
            _t28_l37 = 1; 
            i_l37 = _t8_l37; 
            _t34_l37 = _t10_l37 + _t28_l37; 
            j_l37 = _t34_l37; 
            alpha_l37 = _t5_l37;
        } 
        _t28_l41 = 1; 
        _t38_l41 = _t8_l41 + _t28_l41; 
        i_l41 = _t38_l41; 
        alpha_l41 = _t5_l41;
    }
}
"
2157,21,6.138462777016684e-05,1650458624,"void kernel_syr2k(float alpha, float beta, float A[1024][1024], float B[1024][1024], float C[1024][1024]) {
    #pragma np_opt input float alpha = [0.0, 1.0], float beta = [0.0, 1.0], float A[1024][1024] = [0.0, 1.0], float B[1024][1024] = [0.0, 1.0], float C[1024][1024] = [0.0, 1.0] 
    #pragma np_opt output C 
    int _t194_l197; 
    float _t140_l159; 
    float _t149_l159; 
    float _t152_l159; 
    float _t141_l159; 
    float _t93_l159; 
    float _t113_l159; 
    int _t52_l159; 
    int _t154_l159; 
    float _t102_l159; 
    float _t176_l193; 
    float _t72_l159; 
    float _t168_l193; 
    float _t75_l159; 
    float _t119_l159; 
    float _t132_l159; 
    int _t99_l159; 
    float _t124_l159; 
    float _t68_l159; 
    float _t97_l159; 
    float _t77_l159; 
    float _t164_l193; 
    float _t115_l159; 
    float _t70_l159; 
    float _t169_l193; 
    float _t186_l193; 
    float _t47; 
    float _t101_l159; 
    int _t50_l197; 
    float _t95_l159; 
    float _t184_l193; 
    float _t47_l193; 
    float _t167_l193; 
    int _t157_l193; 
    float _t144_l159; 
    float _t145_l159; 
    float _t112_l159; 
    float _t110_l159; 
    float _t114_l159; 
    int _t174_l193; 
    float _t179_l193; 
    int j_l193; 
    float _t63_l159; 
    int _t56_l159; 
    float _t76_l159; 
    float _t47_l159; 
    float _t147_l159; 
    float _t105_l159; 
    float _t146_l159; 
    float _t79_l159; 
    float _t151_l159; 
    float _t185_l193; 
    float _t59_l159; 
    int _t120_l159; 
    int _t57_l159; 
    float _t87_l159; 
    float _t172_l193; 
    float _t182_l193; 
    float _t170_l193; 
    float _t138_l159; 
    int _t48_l197; 
    float _t91_l159; 
    int _t84_l193; 
    float _t60_l159; 
    float _t177_l193; 
    int j_l159; 
    float _t165_l193; 
    int k_l159; 
    float _t47_l197; 
    float _t161_l193; 
    float _t133_l159; 
    float alpha_l159; 
    float _t123_l159; 
    float alpha_l193; 
    float _t187_l193; 
    float _t129_l159; 
    float _t171_l193; 
    int i_l197; 
    float _t109_l159; 
    float alpha_l197; 
    float _t128_l159; 
    float _t104_l159; 
    float _t117_l159; 
    float _t143_l159; 
    float _t67_l159; 
    float _t142_l159; 
    int _t52_l193; 
    int _t84_l197; 
    int _t50_l159; 
    float _t127_l159; 
    float _t94_l159; 
    float _t62_l159; 
    float _t148_l159; 
    float _t107_l159; 
    float _t130_l159; 
    int _t98_l159; 
    float _t92_l159; 
    float _t108_l159; 
    float _t106_l159; 
    float _t88_l159; 
    float _t71_l159; 
    float _t74_l159; 
    float _t162_l193; 
    float _t82_l159; 
    float _t150_l159; 
    int i_l159; 
    int i_l193; 
    float _t180_l193; 
    int _t65_l159; 
    int _t155_l159; 
    float _t116_l159; 
    int _t134_l159; 
    int _t50_l193; 
    int _t48_l159; 
    float _t96_l159; 
    int _t64_l159; 
    float _t137_l159; 
    int _t48_l193; 
    int _t85_l159; 
    float _t181_l193; 
    float _t166_l193; 
    float _t126_l159; 
    int _t121_l159; 
    int _t84_l159; 
    float _t118_l159; 
    int _t55_l159; 
    float _t80_l159; 
    float _t131_l159; 
    float _t73_l159; 
    int _t189_l193; 
    float _t83_l159; 
    float _t183_l193; 
    float _t111_l159; 
    int _t135_l159; 
    float _t90_l159; 
    _t47 = alpha; 
    _t47_l197 = _t47; 
    alpha_l197 = _t47_l197; 
    _t48_l197 = 0; 
    i_l197 = _t48_l197; 
    while (i_l197 < 1024) {
        _t47_l197 = alpha_l197; 
        _t50_l197 = i_l197; 
        _t50_l193 = _t50_l197; 
        i_l193 = _t50_l193; 
        _t48_l193 = 0; 
        j_l193 = _t48_l193; 
        alpha_l193 = _t47_l197; 
        while (j_l193 < 1024) {
            _t50_l193 = i_l193; 
            _t174_l193 = 1023; 
            _t176_l193 = A[_t50_l193][_t174_l193]; 
            _t52_l193 = j_l193; 
            _t47_l193 = alpha_l193; 
            i_l159 = _t50_l193; 
            _t52_l159 = _t52_l193; 
            j_l159 = _t52_l159; 
            _t48_l159 = 0; 
            k_l159 = _t48_l159; 
            alpha_l159 = _t47_l193; 
            while (k_l159 < 1022) {
                _t56_l159 = k_l159; 
                _t134_l159 = 3; 
                _t135_l159 = _t134_l159 + _t56_l159; 
                _t50_l159 = i_l159; 
                _t47_l159 = alpha_l159; 
                _t55_l159 = 5; 
                _t57_l159 = _t55_l159 + _t56_l159; 
                _t59_l159 = B[_t50_l159][_t57_l159]; 
                _t60_l159 = _t47_l159 * _t59_l159; 
                _t52_l159 = j_l159; 
                _t62_l159 = A[_t52_l159][_t57_l159]; 
                _t63_l159 = _t60_l159 * _t62_l159; 
                _t154_l159 = 7; 
                _t155_l159 = _t56_l159 + _t154_l159; 
                k_l159 = _t155_l159; 
                _t79_l159 = A[_t50_l159][_t56_l159]; 
                _t80_l159 = _t47_l159 * _t79_l159; 
                _t82_l159 = B[_t52_l159][_t56_l159]; 
                _t83_l159 = _t80_l159 * _t82_l159; 
                _t84_l159 = 1; 
                _t85_l159 = _t56_l159 + _t84_l159; 
                _t87_l159 = A[_t50_l159][_t85_l159]; 
                _t88_l159 = _t47_l159 * _t87_l159; 
                _t90_l159 = B[_t52_l159][_t85_l159]; 
                _t91_l159 = _t88_l159 * _t90_l159; 
                _t92_l159 = _t83_l159 + _t91_l159; 
                _t120_l159 = 2; 
                _t121_l159 = _t120_l159 + _t56_l159; 
                _t107_l159 = A[_t50_l159][_t57_l159]; 
                _t108_l159 = _t47_l159 * _t107_l159; 
                _t109_l159 = B[_t52_l159][_t57_l159]; 
                _t110_l159 = _t108_l159 * _t109_l159; 
                _t143_l159 = B[_t50_l159][_t135_l159]; 
                _t64_l159 = 6; 
                _t65_l159 = _t64_l159 + _t56_l159; 
                _t98_l159 = 4; 
                _t99_l159 = _t98_l159 + _t56_l159; 
                _t118_l159 = A[_t52_l159][_t85_l159]; 
                _t116_l159 = B[_t50_l159][_t85_l159]; 
                _t117_l159 = _t47_l159 * _t116_l159; 
                _t119_l159 = _t117_l159 * _t118_l159; 
                _t123_l159 = A[_t50_l159][_t121_l159]; 
                _t124_l159 = _t47_l159 * _t123_l159; 
                _t126_l159 = B[_t52_l159][_t121_l159]; 
                _t127_l159 = _t124_l159 * _t126_l159; 
                _t128_l159 = _t119_l159 + _t127_l159; 
                _t151_l159 = C[_t50_l159][_t52_l159]; 
                _t144_l159 = _t47_l159 * _t143_l159; 
                _t145_l159 = A[_t52_l159][_t135_l159]; 
                _t146_l159 = _t144_l159 * _t145_l159; 
                _t73_l159 = B[_t50_l159][_t65_l159]; 
                _t101_l159 = B[_t50_l159][_t99_l159]; 
                _t102_l159 = _t47_l159 * _t101_l159; 
                j_l159 = _t52_l159; 
                _t95_l159 = A[_t52_l159][_t56_l159]; 
                _t93_l159 = B[_t50_l159][_t56_l159]; 
                _t94_l159 = _t47_l159 * _t93_l159; 
                _t96_l159 = _t94_l159 * _t95_l159; 
                _t97_l159 = _t92_l159 + _t96_l159; 
                _t104_l159 = A[_t52_l159][_t99_l159]; 
                _t105_l159 = _t102_l159 * _t104_l159; 
                _t106_l159 = _t97_l159 + _t105_l159; 
                _t111_l159 = _t106_l159 + _t110_l159; 
                _t114_l159 = B[_t52_l159][_t99_l159]; 
                _t112_l159 = A[_t50_l159][_t99_l159]; 
                _t113_l159 = _t47_l159 * _t112_l159; 
                _t115_l159 = _t113_l159 * _t114_l159; 
                _t137_l159 = A[_t50_l159][_t135_l159]; 
                _t138_l159 = _t47_l159 * _t137_l159; 
                _t140_l159 = B[_t52_l159][_t135_l159]; 
                _t141_l159 = _t138_l159 * _t140_l159; 
                _t129_l159 = B[_t50_l159][_t121_l159]; 
                _t130_l159 = _t47_l159 * _t129_l159; 
                _t131_l159 = A[_t52_l159][_t121_l159]; 
                _t132_l159 = _t130_l159 * _t131_l159; 
                _t133_l159 = _t128_l159 + _t132_l159; 
                _t142_l159 = _t133_l159 + _t141_l159; 
                _t147_l159 = _t142_l159 + _t146_l159; 
                _t148_l159 = _t115_l159 + _t147_l159; 
                _t149_l159 = _t111_l159 + _t148_l159; 
                _t67_l159 = A[_t50_l159][_t65_l159]; 
                _t68_l159 = _t47_l159 * _t67_l159; 
                _t70_l159 = B[_t52_l159][_t65_l159]; 
                _t71_l159 = _t68_l159 * _t70_l159; 
                _t72_l159 = _t63_l159 + _t71_l159; 
                _t74_l159 = _t47_l159 * _t73_l159; 
                _t75_l159 = A[_t52_l159][_t65_l159]; 
                _t76_l159 = _t74_l159 * _t75_l159; 
                _t77_l159 = _t72_l159 + _t76_l159; 
                _t150_l159 = _t77_l159 + _t149_l159; 
                _t152_l159 = _t150_l159 + _t151_l159; 
                C[_t50_l159][_t52_l159] = _t152_l159; 
                i_l159 = _t50_l159; 
                alpha_l159 = _t47_l159;
            } 
            _t157_l193 = 1022; 
            _t168_l193 = A[_t52_l193][_t157_l193]; 
            _t166_l193 = B[_t50_l193][_t157_l193]; 
            _t167_l193 = _t47_l193 * _t166_l193; 
            _t169_l193 = _t167_l193 * _t168_l193; 
            _t161_l193 = A[_t50_l193][_t157_l193]; 
            _t162_l193 = _t47_l193 * _t161_l193; 
            _t164_l193 = B[_t52_l193][_t157_l193]; 
            _t165_l193 = _t162_l193 * _t164_l193; 
            _t170_l193 = _t165_l193 + _t169_l193; 
            _t171_l193 = C[_t50_l193][_t52_l193]; 
            _t172_l193 = _t170_l193 + _t171_l193; 
            C[_t50_l193][_t52_l193] = _t172_l193; 
            _t186_l193 = C[_t50_l193][_t52_l193]; 
            _t183_l193 = A[_t52_l193][_t174_l193]; 
            _t181_l193 = B[_t50_l193][_t174_l193]; 
            _t182_l193 = _t47_l193 * _t181_l193; 
            _t184_l193 = _t182_l193 * _t183_l193; 
            _t177_l193 = _t47_l193 * _t176_l193; 
            _t179_l193 = B[_t52_l193][_t174_l193]; 
            _t180_l193 = _t177_l193 * _t179_l193; 
            _t185_l193 = _t180_l193 + _t184_l193; 
            _t187_l193 = _t185_l193 + _t186_l193; 
            _t84_l193 = 1; 
            _t189_l193 = _t52_l193 + _t84_l193; 
            j_l193 = _t189_l193; 
            i_l193 = _t50_l193; 
            alpha_l193 = _t47_l193; 
            C[_t50_l193][_t52_l193] = _t187_l193;
        } 
        _t84_l197 = 1; 
        _t194_l197 = _t50_l197 + _t84_l197; 
        i_l197 = _t194_l197; 
        alpha_l197 = _t47_l197;
    }
}
"
916,8,5.8598820032784715e-05,2684354628,"void kernel_syr2k(float alpha, float beta, float A[1024][1024], float B[1024][1024], float C[1024][1024]) {
    #pragma np_opt input float alpha = [0.0, 1.0], float beta = [0.0, 1.0], float A[1024][1024] = [0.0, 1.0], float B[1024][1024] = [0.0, 1.0], float C[1024][1024] = [0.0, 1.0] 
    #pragma np_opt output C 
    float _t203_l273; 
    float _t254_l273; 
    float _t215_l273; 
    int i_l281; 
    float _t203; 
    float _t224_l273; 
    float _t249_l273; 
    float _t266_l273; 
    float _t229_l273; 
    int _t206_l281; 
    int _t220_l273; 
    float _t244_l273; 
    int _t212_l281; 
    int _t204_l281; 
    float _t252_l273; 
    float _t237_l273; 
    int _t206_l277; 
    float _t262_l273; 
    float _t227_l273; 
    float _t264_l273; 
    float _t253_l273; 
    int _t213_l273; 
    int _t208_l277; 
    float _t233_l273; 
    int _t274_l277; 
    float alpha_l273; 
    float _t218_l273; 
    float _t219_l273; 
    float _t260_l273; 
    float _t226_l273; 
    float _t238_l273; 
    float _t256_l273; 
    float _t230_l273; 
    float _t203_l281; 
    float _t247_l273; 
    float _t251_l273; 
    float _t248_l273; 
    int _t204_l277; 
    float _t231_l273; 
    int _t206_l273; 
    int j_l277; 
    float _t242_l273; 
    float _t240_l273; 
    float _t250_l273; 
    int _t269_l273; 
    float _t261_l273; 
    float _t259_l273; 
    float _t255_l273; 
    int i_l273; 
    int _t211_l273; 
    int _t212_l273; 
    float _t203_l277; 
    int _t204_l273; 
    float _t216_l273; 
    int _t268_l273; 
    float _t258_l273; 
    float alpha_l281; 
    int _t221_l273; 
    float _t257_l273; 
    int k_l273; 
    int i_l277; 
    int _t208_l273; 
    int _t212_l277; 
    float _t228_l273; 
    float _t232_l273; 
    int _t235_l273; 
    int _t234_l273; 
    int _t278_l281; 
    float _t263_l273; 
    float _t223_l273; 
    float alpha_l277; 
    float _t265_l273; 
    int j_l273; 
    float _t241_l273; 
    float _t245_l273; 
    _t203 = alpha; 
    _t203_l281 = _t203; 
    alpha_l281 = _t203_l281; 
    _t204_l281 = 0; 
    i_l281 = _t204_l281; 
    while (i_l281 < 1024) {
        _t203_l281 = alpha_l281; 
        _t206_l281 = i_l281; 
        _t206_l277 = _t206_l281; 
        i_l277 = _t206_l277; 
        _t204_l277 = 0; 
        j_l277 = _t204_l277; 
        alpha_l277 = _t203_l281; 
        while (j_l277 < 1024) {
            _t208_l277 = j_l277; 
            _t203_l277 = alpha_l277; 
            _t206_l277 = i_l277; 
            i_l273 = _t206_l277; 
            _t208_l273 = _t208_l277; 
            j_l273 = _t208_l273; 
            _t204_l273 = 0; 
            k_l273 = _t204_l273; 
            alpha_l273 = _t203_l277; 
            while (k_l273 < 1024) {
                _t208_l273 = j_l273; 
                _t234_l273 = 3; 
                _t211_l273 = k_l273; 
                _t235_l273 = _t234_l273 + _t211_l273; 
                _t262_l273 = A[_t208_l273][_t235_l273]; 
                _t206_l273 = i_l273; 
                _t260_l273 = B[_t206_l273][_t235_l273]; 
                _t203_l273 = alpha_l273; 
                _t261_l273 = _t203_l273 * _t260_l273; 
                _t263_l273 = _t261_l273 * _t262_l273; 
                _t240_l273 = B[_t208_l273][_t235_l273]; 
                _t237_l273 = A[_t206_l273][_t235_l273]; 
                _t238_l273 = _t203_l273 * _t237_l273; 
                _t241_l273 = _t238_l273 * _t240_l273; 
                _t220_l273 = 2; 
                _t221_l273 = _t220_l273 + _t211_l273; 
                _t231_l273 = A[_t208_l273][_t221_l273]; 
                _t229_l273 = B[_t206_l273][_t221_l273]; 
                _t230_l273 = _t203_l273 * _t229_l273; 
                _t232_l273 = _t230_l273 * _t231_l273; 
                _t212_l273 = 1; 
                _t213_l273 = _t211_l273 + _t212_l273; 
                _t215_l273 = B[_t206_l273][_t213_l273]; 
                _t216_l273 = _t203_l273 * _t215_l273; 
                _t218_l273 = A[_t208_l273][_t213_l273]; 
                _t219_l273 = _t216_l273 * _t218_l273; 
                _t223_l273 = A[_t206_l273][_t221_l273]; 
                _t224_l273 = _t203_l273 * _t223_l273; 
                _t226_l273 = B[_t208_l273][_t221_l273]; 
                _t227_l273 = _t224_l273 * _t226_l273; 
                _t228_l273 = _t219_l273 + _t227_l273; 
                _t233_l273 = _t228_l273 + _t232_l273; 
                _t242_l273 = _t233_l273 + _t241_l273; 
                _t256_l273 = A[_t208_l273][_t211_l273]; 
                _t254_l273 = B[_t206_l273][_t211_l273]; 
                _t255_l273 = _t203_l273 * _t254_l273; 
                _t257_l273 = _t255_l273 * _t256_l273; 
                _t247_l273 = B[_t208_l273][_t211_l273]; 
                _t244_l273 = A[_t206_l273][_t211_l273]; 
                _t245_l273 = _t203_l273 * _t244_l273; 
                _t248_l273 = _t245_l273 * _t247_l273; 
                _t249_l273 = A[_t206_l273][_t213_l273]; 
                _t250_l273 = _t203_l273 * _t249_l273; 
                _t251_l273 = B[_t208_l273][_t213_l273]; 
                _t252_l273 = _t250_l273 * _t251_l273; 
                _t253_l273 = _t248_l273 + _t252_l273; 
                _t258_l273 = _t253_l273 + _t257_l273; 
                _t259_l273 = _t242_l273 + _t258_l273; 
                _t264_l273 = _t259_l273 + _t263_l273; 
                _t265_l273 = C[_t206_l273][_t208_l273]; 
                _t266_l273 = _t264_l273 + _t265_l273; 
                C[_t206_l273][_t208_l273] = _t266_l273; 
                j_l273 = _t208_l273; 
                _t268_l273 = 4; 
                _t269_l273 = _t211_l273 + _t268_l273; 
                k_l273 = _t269_l273; 
                i_l273 = _t206_l273; 
                alpha_l273 = _t203_l273;
            } 
            _t212_l277 = 1; 
            _t274_l277 = _t208_l277 + _t212_l277; 
            i_l277 = _t206_l277; 
            j_l277 = _t274_l277; 
            alpha_l277 = _t203_l277;
        } 
        _t212_l281 = 1; 
        _t278_l281 = _t206_l281 + _t212_l281; 
        i_l281 = _t278_l281; 
        alpha_l281 = _t203_l281;
    }
}
"
609,5,8.353964221896604e-05,5368709168,"void kernel_syr2k(float alpha, float beta, float A[1024][1024], float B[1024][1024], float C[1024][1024]) {
    #pragma np_opt input float alpha = [0.0, 1.0], float beta = [0.0, 1.0], float A[1024][1024] = [0.0, 1.0], float B[1024][1024] = [0.0, 1.0], float C[1024][1024] = [0.0, 1.0] 
    #pragma np_opt output C 
    float _t311_l329; 
    int _t303_l329; 
    int _t288_l337; 
    int _t302_l333; 
    float _t309_l329; 
    float _t305_l329; 
    int _t325_l329; 
    int _t330_l333; 
    int _t292_l329; 
    int j_l329; 
    int _t302_l337; 
    float _t287_l337; 
    float _t321_l329; 
    float _t301_l329; 
    float _t306_l329; 
    float _t317_l329; 
    float _t308_l329; 
    float _t310_l329; 
    float _t297_l329; 
    int i_l333; 
    int _t295_l329; 
    float _t287_l329; 
    float alpha_l329; 
    float _t318_l329; 
    int _t290_l337; 
    float _t316_l329; 
    float _t298_l329; 
    float _t287_l333; 
    int _t334_l337; 
    float _t287; 
    float _t313_l329; 
    float alpha_l337; 
    float _t319_l329; 
    int j_l333; 
    float alpha_l333; 
    int _t324_l329; 
    float _t312_l329; 
    float _t300_l329; 
    float _t322_l329; 
    float _t315_l329; 
    int _t288_l329; 
    int _t292_l333; 
    int i_l337; 
    int _t302_l329; 
    int _t288_l333; 
    float _t320_l329; 
    float _t314_l329; 
    int k_l329; 
    int _t290_l329; 
    int _t290_l333; 
    int i_l329; 
    _t287 = alpha; 
    _t287_l337 = _t287; 
    alpha_l337 = _t287_l337; 
    _t288_l337 = 0; 
    i_l337 = _t288_l337; 
    while (i_l337 < 1024) {
        _t287_l337 = alpha_l337; 
        _t290_l337 = i_l337; 
        _t290_l333 = _t290_l337; 
        i_l333 = _t290_l333; 
        _t288_l333 = 0; 
        j_l333 = _t288_l333; 
        alpha_l333 = _t287_l337; 
        while (j_l333 < 1024) {
            _t287_l333 = alpha_l333; 
            _t290_l333 = i_l333; 
            _t292_l333 = j_l333; 
            i_l329 = _t290_l333; 
            _t292_l329 = _t292_l333; 
            j_l329 = _t292_l329; 
            _t288_l329 = 0; 
            k_l329 = _t288_l329; 
            alpha_l329 = _t287_l333; 
            while (k_l329 < 1024) {
                _t295_l329 = k_l329; 
                _t302_l329 = 1; 
                _t303_l329 = _t295_l329 + _t302_l329; 
                _t292_l329 = j_l329; 
                _t318_l329 = A[_t292_l329][_t303_l329]; 
                _t287_l329 = alpha_l329; 
                _t290_l329 = i_l329; 
                _t316_l329 = B[_t290_l329][_t303_l329]; 
                _t317_l329 = _t287_l329 * _t316_l329; 
                _t319_l329 = _t317_l329 * _t318_l329; 
                _t311_l329 = B[_t290_l329][_t295_l329]; 
                _t312_l329 = _t287_l329 * _t311_l329; 
                _t313_l329 = A[_t292_l329][_t295_l329]; 
                _t314_l329 = _t312_l329 * _t313_l329; 
                _t305_l329 = A[_t290_l329][_t303_l329]; 
                _t306_l329 = _t287_l329 * _t305_l329; 
                _t308_l329 = B[_t292_l329][_t303_l329]; 
                _t309_l329 = _t306_l329 * _t308_l329; 
                _t297_l329 = A[_t290_l329][_t295_l329]; 
                _t298_l329 = _t287_l329 * _t297_l329; 
                _t300_l329 = B[_t292_l329][_t295_l329]; 
                _t301_l329 = _t298_l329 * _t300_l329; 
                _t310_l329 = _t301_l329 + _t309_l329; 
                _t315_l329 = _t310_l329 + _t314_l329; 
                _t320_l329 = _t315_l329 + _t319_l329; 
                _t321_l329 = C[_t290_l329][_t292_l329]; 
                _t322_l329 = _t320_l329 + _t321_l329; 
                j_l329 = _t292_l329; 
                _t324_l329 = 2; 
                _t325_l329 = _t295_l329 + _t324_l329; 
                k_l329 = _t325_l329; 
                i_l329 = _t290_l329; 
                alpha_l329 = _t287_l329; 
                C[_t290_l329][_t292_l329] = _t322_l329;
            } 
            _t302_l333 = 1; 
            _t330_l333 = _t292_l333 + _t302_l333; 
            j_l333 = _t330_l333; 
            i_l333 = _t290_l333; 
            alpha_l333 = _t287_l333;
        } 
        _t302_l337 = 1; 
        _t334_l337 = _t290_l337 + _t302_l337; 
        i_l337 = _t334_l337; 
        alpha_l337 = _t287_l337;
    }
}
"
1796,16,6.508011574624106e-05,1660944384,"void kernel_syr2k(float alpha, float beta, float A[1024][1024], float B[1024][1024], float C[1024][1024]) {
    #pragma np_opt input float alpha = [0.0, 1.0], float beta = [0.0, 1.0], float A[1024][1024] = [0.0, 1.0], float B[1024][1024] = [0.0, 1.0], float C[1024][1024] = [0.0, 1.0] 
    #pragma np_opt output C 
    float _t475_l489; 
    float _t413_l455; 
    float _t446_l455; 
    float _t463_l489; 
    float _t459_l489; 
    float _t407_l455; 
    float _t383_l455; 
    float _t369_l455; 
    float _t406_l455; 
    float _t424_l455; 
    float _t480_l489; 
    int k_l455; 
    float _t441_l455; 
    float _t419_l455; 
    float _t434_l455; 
    float _t404_l455; 
    float _t442_l455; 
    int _t453_l489; 
    int _t431_l455; 
    float _t387_l455; 
    float _t371_l455; 
    float _t461_l489; 
    float _t370_l455; 
    float _t479_l489; 
    float _t467_l489; 
    int _t352_l455; 
    float _t366_l455; 
    float _t389_l455; 
    int _t470_l489; 
    int _t353_l455; 
    int _t430_l455; 
    float _t375_l455; 
    int _t416_l455; 
    float _t478_l489; 
    int _t348_l489; 
    int _t344_l489; 
    int _t380_l493; 
    float _t388_l455; 
    float _t472_l489; 
    float _t408_l455; 
    float _t448_l455; 
    int _t344_l493; 
    float _t458_l489; 
    float _t376_l455; 
    float _t405_l455; 
    float _t414_l455; 
    float _t438_l455; 
    float _t358_l455; 
    float _t476_l489; 
    float _t423_l455; 
    float _t392_l455; 
    float _t482_l489; 
    float _t363_l455; 
    float alpha_l493; 
    float _t378_l455; 
    float _t415_l455; 
    float _t379_l455; 
    int _t380_l455; 
    int _t380_l489; 
    int i_l489; 
    float _t373_l455; 
    float _t481_l489; 
    float _t356_l455; 
    float _t440_l455; 
    int _t381_l455; 
    float _t428_l455; 
    float _t412_l455; 
    float _t393_l455; 
    float _t391_l455; 
    float _t368_l455; 
    int _t344_l455; 
    int _t346_l493; 
    float _t401_l455; 
    float _t397_l455; 
    float _t439_l455; 
    int _t395_l455; 
    int _t417_l455; 
    float _t364_l455; 
    float _t477_l489; 
    int _t485_l489; 
    float _t403_l455; 
    float alpha_l489; 
    float _t384_l455; 
    int _t348_l455; 
    int i_l493; 
    float _t343_l493; 
    int _t351_l455; 
    int j_l489; 
    float _t386_l455; 
    float _t462_l489; 
    float _t465_l489; 
    int _t451_l455; 
    float _t410_l455; 
    int _t346_l489; 
    float _t427_l455; 
    float _t456_l489; 
    float _t398_l455; 
    int _t346_l455; 
    float _t426_l455; 
    float _t437_l455; 
    float _t425_l455; 
    float _t468_l489; 
    int _t360_l455; 
    float _t443_l455; 
    int _t450_l455; 
    float _t343_l455; 
    float _t447_l455; 
    float _t411_l455; 
    int _t394_l455; 
    float _t355_l455; 
    float _t473_l489; 
    float _t343_l489; 
    float _t483_l489; 
    float _t343; 
    float _t445_l455; 
    float _t433_l455; 
    int _t490_l493; 
    float _t367_l455; 
    float _t400_l455; 
    int _t361_l455; 
    int j_l455; 
    float _t466_l489; 
    float _t359_l455; 
    float _t390_l455; 
    float _t422_l455; 
    float _t429_l455; 
    float _t444_l455; 
    float _t372_l455; 
    float _t420_l455; 
    float _t409_l455; 
    float _t402_l455; 
    float alpha_l455; 
    float _t464_l489; 
    float _t436_l455; 
    int i_l455; 
    _t343 = alpha; 
    _t343_l493 = _t343; 
    alpha_l493 = _t343_l493; 
    _t344_l493 = 0; 
    i_l493 = _t344_l493; 
    while (i_l493 < 1024) {
        _t343_l493 = alpha_l493; 
        _t346_l493 = i_l493; 
        _t346_l489 = _t346_l493; 
        i_l489 = _t346_l489; 
        _t344_l489 = 0; 
        j_l489 = _t344_l489; 
        alpha_l489 = _t343_l493; 
        while (j_l489 < 1024) {
            _t348_l489 = j_l489; 
            _t346_l489 = i_l489; 
            _t453_l489 = 1022; 
            _t464_l489 = B[_t346_l489][_t453_l489]; 
            _t343_l489 = alpha_l489; 
            _t465_l489 = _t343_l489 * _t464_l489; 
            _t458_l489 = A[_t346_l489][_t453_l489]; 
            _t470_l489 = 1023; 
            _t472_l489 = A[_t346_l489][_t470_l489]; 
            i_l455 = _t346_l489; 
            _t348_l455 = _t348_l489; 
            j_l455 = _t348_l455; 
            _t344_l455 = 0; 
            k_l455 = _t344_l455; 
            alpha_l455 = _t343_l489; 
            while (k_l455 < 1022) {
                _t352_l455 = k_l455; 
                _t348_l455 = j_l455; 
                _t391_l455 = A[_t348_l455][_t352_l455]; 
                _t343_l455 = alpha_l455; 
                _t346_l455 = i_l455; 
                _t389_l455 = B[_t346_l455][_t352_l455]; 
                _t390_l455 = _t343_l455 * _t389_l455; 
                _t392_l455 = _t390_l455 * _t391_l455; 
                _t360_l455 = 6; 
                _t361_l455 = _t360_l455 + _t352_l455; 
                _t369_l455 = B[_t346_l455][_t361_l455]; 
                _t380_l455 = 1; 
                _t381_l455 = _t352_l455 + _t380_l455; 
                _t394_l455 = 4; 
                _t395_l455 = _t394_l455 + _t352_l455; 
                _t410_l455 = B[_t348_l455][_t395_l455]; 
                _t430_l455 = 3; 
                _t431_l455 = _t430_l455 + _t352_l455; 
                _t439_l455 = B[_t346_l455][_t431_l455]; 
                _t440_l455 = _t343_l455 * _t439_l455; 
                _t441_l455 = A[_t348_l455][_t431_l455]; 
                _t442_l455 = _t440_l455 * _t441_l455; 
                _t433_l455 = A[_t346_l455][_t431_l455]; 
                _t434_l455 = _t343_l455 * _t433_l455; 
                _t436_l455 = B[_t348_l455][_t431_l455]; 
                _t437_l455 = _t434_l455 * _t436_l455; 
                _t414_l455 = A[_t348_l455][_t381_l455]; 
                _t412_l455 = B[_t346_l455][_t381_l455]; 
                _t413_l455 = _t343_l455 * _t412_l455; 
                _t415_l455 = _t413_l455 * _t414_l455; 
                _t416_l455 = 2; 
                _t417_l455 = _t416_l455 + _t352_l455; 
                _t419_l455 = A[_t346_l455][_t417_l455]; 
                _t420_l455 = _t343_l455 * _t419_l455; 
                _t422_l455 = B[_t348_l455][_t417_l455]; 
                _t423_l455 = _t420_l455 * _t422_l455; 
                _t424_l455 = _t415_l455 + _t423_l455; 
                _t425_l455 = B[_t346_l455][_t417_l455]; 
                _t426_l455 = _t343_l455 * _t425_l455; 
                _t427_l455 = A[_t348_l455][_t417_l455]; 
                _t428_l455 = _t426_l455 * _t427_l455; 
                _t429_l455 = _t424_l455 + _t428_l455; 
                _t438_l455 = _t429_l455 + _t437_l455; 
                _t443_l455 = _t438_l455 + _t442_l455; 
                _t366_l455 = B[_t348_l455][_t361_l455]; 
                alpha_l455 = _t343_l455; 
                _t351_l455 = 5; 
                _t353_l455 = _t351_l455 + _t352_l455; 
                _t355_l455 = B[_t346_l455][_t353_l455]; 
                _t383_l455 = A[_t346_l455][_t381_l455]; 
                _t384_l455 = _t343_l455 * _t383_l455; 
                _t400_l455 = A[_t348_l455][_t395_l455]; 
                _t397_l455 = B[_t346_l455][_t395_l455]; 
                _t398_l455 = _t343_l455 * _t397_l455; 
                _t401_l455 = _t398_l455 * _t400_l455; 
                _t375_l455 = A[_t346_l455][_t352_l455]; 
                _t376_l455 = _t343_l455 * _t375_l455; 
                _t378_l455 = B[_t348_l455][_t352_l455]; 
                _t379_l455 = _t376_l455 * _t378_l455; 
                _t386_l455 = B[_t348_l455][_t381_l455]; 
                _t387_l455 = _t384_l455 * _t386_l455; 
                _t388_l455 = _t379_l455 + _t387_l455; 
                _t393_l455 = _t388_l455 + _t392_l455; 
                _t402_l455 = _t393_l455 + _t401_l455; 
                _t403_l455 = A[_t346_l455][_t353_l455]; 
                _t404_l455 = _t343_l455 * _t403_l455; 
                _t405_l455 = B[_t348_l455][_t353_l455]; 
                _t406_l455 = _t404_l455 * _t405_l455; 
                _t407_l455 = _t402_l455 + _t406_l455; 
                _t408_l455 = A[_t346_l455][_t395_l455]; 
                _t409_l455 = _t343_l455 * _t408_l455; 
                _t411_l455 = _t409_l455 * _t410_l455; 
                _t444_l455 = _t411_l455 + _t443_l455; 
                _t445_l455 = _t407_l455 + _t444_l455; 
                _t356_l455 = _t343_l455 * _t355_l455; 
                _t358_l455 = A[_t348_l455][_t353_l455]; 
                _t359_l455 = _t356_l455 * _t358_l455; 
                _t363_l455 = A[_t346_l455][_t361_l455]; 
                _t364_l455 = _t343_l455 * _t363_l455; 
                _t367_l455 = _t364_l455 * _t366_l455; 
                _t368_l455 = _t359_l455 + _t367_l455; 
                _t370_l455 = _t343_l455 * _t369_l455; 
                _t371_l455 = A[_t348_l455][_t361_l455]; 
                _t372_l455 = _t370_l455 * _t371_l455; 
                _t373_l455 = _t368_l455 + _t372_l455; 
                _t446_l455 = _t373_l455 + _t445_l455; 
                j_l455 = _t348_l455; 
                _t447_l455 = C[_t346_l455][_t348_l455]; 
                _t448_l455 = _t446_l455 + _t447_l455; 
                C[_t346_l455][_t348_l455] = _t448_l455; 
                _t450_l455 = 7; 
                _t451_l455 = _t352_l455 + _t450_l455; 
                k_l455 = _t451_l455; 
                i_l455 = _t346_l455;
            } 
            _t456_l489 = C[_t346_l489][_t348_l489]; 
            _t459_l489 = _t343_l489 * _t458_l489; 
            _t461_l489 = B[_t348_l489][_t453_l489]; 
            _t462_l489 = _t459_l489 * _t461_l489; 
            _t463_l489 = _t456_l489 + _t462_l489; 
            _t466_l489 = A[_t348_l489][_t453_l489]; 
            _t467_l489 = _t465_l489 * _t466_l489; 
            _t468_l489 = _t463_l489 + _t467_l489; 
            C[_t346_l489][_t348_l489] = _t468_l489; 
            _t482_l489 = C[_t346_l489][_t348_l489]; 
            _t479_l489 = A[_t348_l489][_t470_l489]; 
            _t477_l489 = B[_t346_l489][_t470_l489]; 
            _t478_l489 = _t343_l489 * _t477_l489; 
            _t480_l489 = _t478_l489 * _t479_l489; 
            _t473_l489 = _t343_l489 * _t472_l489; 
            _t475_l489 = B[_t348_l489][_t470_l489]; 
            _t476_l489 = _t473_l489 * _t475_l489; 
            _t481_l489 = _t476_l489 + _t480_l489; 
            _t483_l489 = _t481_l489 + _t482_l489; 
            _t380_l489 = 1; 
            _t485_l489 = _t348_l489 + _t380_l489; 
            j_l489 = _t485_l489; 
            i_l489 = _t346_l489; 
            alpha_l489 = _t343_l489; 
            C[_t346_l489][_t348_l489] = _t483_l489;
        } 
        _t380_l493 = 1; 
        _t490_l493 = _t346_l493 + _t380_l493; 
        i_l493 = _t490_l493; 
        alpha_l493 = _t343_l493;
    }
}
"
